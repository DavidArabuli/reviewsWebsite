17.03.2025 
 - core is ready, basic registration\login, posting articles, editing articles etc.


- TODO
 1) Steam API integration 
  - once article is created Steam API should be contacted 
    and all the data for that game should be pulled - game screenshots, score, PC reqs etc.
    -  game Steam ID could be provided when article is posted
    -  alternatively, it could be a process of storing all the data beforehand, assuming, 
       that games that are going to be reviewed are known already.
 2) Upload screenshots (jpg, png files) to attach to the article
 3) Add website`s review score fields 
 4) relevant youtube video field (for trailers etc)
 5) ability to sort "All Reviews" according to score
 6) ability to filter "All Reviews" according to genre tags
 7) invite links for new users to register as authors OR just admin giving rights to users ???
 8) admin dashboard 
 9) editor role

 18-21.03
 - admin panel functionality and roles
 - there is admin, editor\moderator, and author.
  admin should have full access and ability to add\remove editors and authors,
  editor can edit author`s articles

  22.03
   - basic sorting done
   - redone model "author", which is redundant, user gets roles "is_author\editor",

  23.03
  - tags and filtering based on tags added

  24.03
  - working on Steam API. 
    - I believe it is better to pre-load data and save it to DB as a 
      separate action, instead of contacting API, saving, retrieving 
      while review is being posted.
      Therefore, there must be a separate form to get\save all the relevant Steam data, and then simply providing steam app id when
      you post review, so that it loads steam score, PC reqs from DB, instead of steam API.
      

    - created Game model (+ controller, migration and factory), for Steam data.